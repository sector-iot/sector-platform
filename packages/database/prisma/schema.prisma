// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  devices       Device[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Device {
  id          String    @id @default(cuid())
  name        String
  model       DeviceModel @default(ESP32)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  repositoryId String?
  repository  Repository? @relation(fields: [repositoryId], references: [id])
  @@map("device")
}

enum DeviceModel {
  ESP32
}



model Repository {
  id String    @id @default(cuid())
  name String
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  devices Device[]
  firmwareBuilds FirmwareBuilds[]
}

model FirmwareBuilds  {
  id String @id @default(cuid())
  version Float
  url String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  repositoryId String
  repository Repository? @relation(fields: [repositoryId], references: [id])
  status BuildStatus @default(BUILDING)
}

enum BuildStatus {
  BUILDING
  SUCCESS
  FAILED
}