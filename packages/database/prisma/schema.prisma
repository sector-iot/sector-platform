// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  devices       Device[]
  repositories  Repository[]
  groups        Group[]

  apikeys Apikey[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Device {
  id           String      @id @default(cuid())
  name         String
  model        DeviceModel @default(ESP32)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  repositoryId String?
  repository   Repository? @relation(fields: [repositoryId], references: [id])
  groups       GroupDevice[]

  @@map("device")
}

enum DeviceModel {
  ESP32
}

model Group {
  id           String       @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  devices      GroupDevice[]
  repositories RepositoryGroup[]
  firmwareBuilds FirmwareBuilds[]
}

model GroupDevice {
  id        String   @id @default(cuid())
  groupId   String
  deviceId  String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupId, deviceId])
}

model RepositoryGroup {
  id           String     @id @default(cuid())
  repositoryId String
  groupId      String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  group        Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([repositoryId, groupId])
}

model Repository {
  id             String           @id @default(cuid())
  name           String
  url            String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  devices        Device[]
  firmwareBuilds FirmwareBuilds[]
  groups         RepositoryGroup[]
}

model FirmwareBuilds {
  id           String      @id @default(cuid())
  version      Float
  url          String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  repositoryId String
  repository   Repository? @relation(fields: [repositoryId], references: [id])
  groupId      String?
  group        Group?      @relation(fields: [groupId], references: [id])
  status       BuildStatus @default(BUILDING)
}

enum BuildStatus {
  BUILDING
  SUCCESS
  FAILED
}

model Apikey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?

  @@map("apikey")
}
